group 'io.github.asseco-pst'
version "2.1.0-SNAPSHOT"

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
        classpath 'edu.sc.seis.gradle:launch4j:2.4.4'
    }
}

apply plugin: 'groovy'
apply plugin: 'signing'
apply plugin: 'maven-publish'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'edu.sc.seis.launch4j'

repositories {
    mavenCentral()
}

dependencies {
    // https://mvnrepository.com/artifact/org.codehaus.groovy/groovy
    compile group: 'org.codehaus.groovy', name: 'groovy', version: '2.5.8'
    // https://mvnrepository.com/artifact/org.codehaus.groovy/groovy-json
    compile group: 'org.codehaus.groovy', name: 'groovy-json', version: '2.5.8'
    // https://mvnrepository.com/artifact/org.gitlab4j/gitlab4j-api
    // https://mvnrepository.com/artifact/org.codehaus.groovy/groovy-cli-picocli
    compile group: 'org.codehaus.groovy', name: 'groovy-cli-picocli', version: '2.5.8'
    compile group: 'org.gitlab4j', name: 'gitlab4j-api', version: '4.9.17'
    // https://mvnrepository.com/artifact/org.yaml/snakeyaml
    compile group: 'org.yaml', name: 'snakeyaml', version: '1.24'
    // https://mvnrepository.com/artifact/com.vdurmont/semver4j
    compile group: 'com.vdurmont', name: 'semver4j', version: '2.2.0'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.30'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.3'
}

 application {
     mainClassName = 'io.github.asseco.pst.Main'
 }

jar {
    manifest {
        attributes 'Main-Class': project.group + '.Main'
    }
}

createExe {
    mainClassName = 'io.github.asseco.pst.Main'
    headerType = "console"
    icon = "${projectDir}/assets/einstein.ico"
    jar = "${rootDir}/build/libs/${rootProject.name}-${project.version}.jar"
    outfile = "${rootProject.name}-${project.version}.exe"
}

shadowJar {
    classifier = ''
}

task sourcesJarGen(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJarGen(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        shadow(MavenPublication) {
            artifactId = 'einstein'
            project.shadow.component(it)
            pom {
                name = 'einstein'
                description = 'A library that allows managing artifacts in a Liberty server'
                url = 'https://github.com/asseco-pst/einstein'
                inceptionYear = '2019'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'assecopst'
                        name = 'Asseco PST'
                        email = 'servicos.dcs@pst.asseco.com'
                        organization = 'Asseco PST'
                        organizationUrl = 'https://www.pst.asseco.com'
                    }
                }
                scm {
                    url = 'https://github.com/asseco-pst/einstein'
                    connection = 'scm:https://github.com/asseco-pst/einstein.git'
                    developerConnection = 'scm:git://github.com/asseco-pst/einstein.git'
                }
            }
            artifact sourcesJarGen
            artifact javadocJarGen
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = project.hasProperty('ossrhUsername') ? ossrhUsername : "Unknown user"
                password = project.hasProperty('ossrhPassword') ? ossrhPassword : "Unknown password"
            }
        }
    }
}

signing {
    sign publishing.publications.shadow
}